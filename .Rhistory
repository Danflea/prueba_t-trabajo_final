shapiro.test(data_ayacucho_limpio$promedio)
data_promedios <- data_ayacucho_limpio %>% filter(data_ayacucho_limpio$promedio > 400)
View(data_promedios)
data_promedios
data_promedios$promedio
qqnorm(data_promedios$promedio)
qqline(data_promedios$promedio, col = "orange")
shapiro.test(data_promedios$promedio)
data_promedios <- data_ayacucho_limpio %>% filter(700> data_ayacucho_limpio$promedio > 500)
data_promedios <- data_ayacucho_limpio %>% filter(data_ayacucho_limpio$promedio > 500 | data_ayacucho_limpio$promedio<700)
data_promedios <- data_ayacucho_limpio %>% filter(data_ayacucho_limpio$promedio > 500 | data_ayacucho_limpio$promedio<750)
data_promedios$promedio
qqnorm(data_promedios$promedio)
qqline(data_promedios$promedio, col = "orange")
shapiro.test(data_promedios$promedio)
data_promedios <- data_ayacucho_limpio %>% filter(data_ayacucho_limpio$promedio > 500 & data_ayacucho_limpio$promedio<750)
data_promedios$promedio
qqnorm(data_promedios$promedio)
qqline(data_promedios$promedio, col = "orange")
shapiro.test(data_promedios$promedio)
data_promedios <- data_ayacucho_limpio %>% filter(data_ayacucho_limpio$promedio > 500 | data_ayacucho_limpio$promedio<750)
data_promedios$promedio
qqnorm(data_promedios$promedio)
qqline(data_promedios$promedio, col = "orange")
z_scores_promedios <- scale(data_promedios$promedio)
extremos_promedios <- which(abs(z_scores_promedios)>3)
data_extremos_promedios <- nota_m[extremos_promedios]
data_extremos_promedios <- data_promedios[extremos_promedios]
data_extremos_promedios <- data_promedios$promedio[extremos_promedios]
print(data_extremos_promedios)
nota_promedios <- data_ayacucho_limpio$promedio[-data_extremos_promedios]
shapiro.test(nota_promedios)
qqnorm(nota_promedios)
qqline(nota_promedios, col = "orange")
z_scores_promedios
length(extremos_promedios)
extremos_promedios <- which(z_scores_promedios>3)
length(extremos_promedios)
modelo <- lm(promedio~1, data = data_promedios)
shapiro.test(modelo$residuals)
data_promedios
library(olsrr)
ols_plot_dffits(modelo)
ols_plot_dfbetas(modelo)
ols_plot_resid_lev(modelo)
data_rural <- data_ayacucho_limpio %>% filter(area=="Rural") %>% select(-area)
nota_m <- data_rural$M500_EM_2S_2023_MA # se tiene que extraer como vector numerico
shapiro.test(nota_m)
# Q-Q Plot
qqnorm(nota_m)
qqline(nota_m, col = "red")
# Histograma
hist(nota_m, main = "Histograma de Nota Matemáticas", xlab = "Puntajes")
##  quitar valores extremos
z_scores_m <- scale(nota_m)
extremos_m <- which(abs(z_scores_m)>3)
data_extremos_m <- nota_m[extremos_m]
print(data_extremos_m)
nota_m_sin_extremos <- nota_m[-extremos_m]
shapiro.test(nota_m_sin_extremos)  # cumple normalidad
qqnorm(nota_m_sin_extremos)
qqline(nota_m_sin_extremos, col = "red")
hist(nota_m, main = "Histograma de Nota Matemáticas", xlab = "Puntajes")
dfbetas <- dfbetas(modelo)
n <- nrow(data_promedios)
dfbetas <- dfbetas(modelo)
dfbetas[,1]>2/sqrt(n)
(D1<-which(abs(dfbetas[,1])>2/sqrt(n)))
modelo2 <- lm(promedio[-D1]~1, data_promedios)
shapiro.test(modelo2$residuals)
shapiro.test(data_promedios$promedio)
shapiro.test(data_ayacucho_limpio$promedio)
shapiro.test(modelo$residuals)
length(D1)
shapiro.test(modelo2$residuals)
dffit <- dffits(modelo)
(D2<-which(abs(dffit)>2*sqrt(q/n)))
q <- 1
(D2<-which(abs(dffit)>2*sqrt(q/n)))
length(D2)
length(D1)
modelo2 <- lm(promedio[-D2]~1, data_promedios)
shapiro.test(modelo2$residuals)
modelo <- lm(promedio~., data = data_promedios)
shapiro.test(modelo$residuals)
dfbetas <- dfbetas(modelo)
dfbetas[,1]>2/sqrt(n)
(D1<-which(abs(dfbetas[,1])>2/sqrt(n)))
length(D1)
modelo2 <- lm(promedio[-D1]~.[-D1], data_promedios)
modelo2 <- lm(promedio[-D1]~.-D1, data_promedios)
shapiro.test(modelo2$residuals)
modelo2 <- lm(promedio[-D1]~M500_EM_2S_2023_CT[-D1]+
M500_EM_2S_2023_MA[-D1]+
M500_EM_2S_2023_CS[-D1]
, data_promedios)
shapiro.test(modelo2$residuals)
modelo <- lm(promedio~1, data = data_promedios)
shapiro.test(modelo$residuals)
n <- nrow(data_promedios)
dfbetas <- dfbetas(modelo)
dfbetas[,1]>2/sqrt(n)
(D1<-which(abs(dfbetas[,1])>2/sqrt(n)))
length(D1)
data_promedios_df <- data_promedios[-D1]
data_promedios_df <- data_promedios$promedio[-D1]
shapiro.test(data_promedios_df)
ti <- rstudent(modelo)
(infl1 <- which(abs(ti)>2))
length(infl1)
modelo2 <- lm(promedio[-infl1]~1, data = data_promedios)
shapiro.test(modelo2)
shapiro.test(modelo2$residuals)
shapiro.test(modelo$residuals)
shapiro.test(modelo2$residuals)
hii <- hatvalues(modelo)
hat_hii <- which(abs(hii)>2(q/n))
hii <- hatvalues(modelo)
hat_hii <- which(abs(hii)>2(q/n))
hat_hii <- which(abs(hii)>(2q/n))
hat_hii <- which(abs(hii)>2*(q/n))
hat_hii %>% length()
hat_hii
length(hat_hii)
library(readxl)
BD <- read_excel("BD_2S ENLA muestral 2023.xlsx")
library(magrittr)
library(dplyr)
data_ayacucho <- BD %>% filter(departamento == "AYACUCHO") %>% select(c("sexo",
"area",                     # Zona donde viven (rural o urbana)
"M500_EM_2S_2023_CT",       # Puntaje de comprensión lectora
"M500_EM_2S_2023_MA",       # Puntaje de matemáticas
"M500_EM_2S_2023_CS"        # Puntaje de ciencias sociales
))
View(data_ayacucho)
data_rural <- data_ayacucho_limpio %>% filter(area=="Rural") %>% select(-area)
any(is.na(data_ayacucho))
data_ayacucho_limpio <- na.omit(data_ayacucho)
data_rural <- data_ayacucho_limpio %>% filter(area=="Rural") %>% select(-area)
View(data_rural)
View(data_rural)
data_rural <- data_ayacucho_limpio %>% filter(area=="Rural") %>% select(sexo,M500_EM_2S_2023_MA)
View(data_rural)
library(ggplot2)
ggplot(data = data_rural) %>% geom_bar()
ggplot(data = data_rural) %>% geom_bar(sexo)
shapiro.test(data_rural$M500_EM_2S_2023_MA)
nota_m <- data_rural$M500_EM_2S_2023_MA # se tiene que extraer como vector numerico
shapiro.test(nota_m)
library(readxl)
BD <- read_excel("BD_2S ENLA muestral 2023.xlsx")
library(magrittr)
library(dplyr)
data_ayacucho <- BD %>% filter(departamento == "AYACUCHO") %>% select(c("sexo",
"area",                     # Zona donde viven (rural o urbana)
"M500_EM_2S_2023_MA"))
View(data_ayacucho)
any(is.na(data_ayacucho))
data_ayacucho_limpio <- na.omit(data_ayacucho)
data_rural <- data_ayacucho_limpio %>% filter(area=="Rural") %>% select(sexo,M500_EM_2S_2023_MA) # se tiene que extraer como vector numerico
shapiro.test(nota_m)
shapiro.test(data_rural$M500_EM_2S_2023_MA)
View(data_rural)
nota_m <- data_rural$M500_EM_2S_2023_MA
shapiro.test(nota_m)
# Q-Q Plot
qqnorm(nota_m)
qqline(nota_m, col = "red")
# Histograma
hist(nota_m, main = "Histograma de Nota Matemáticas", xlab = "Puntajes")
##  quitar valores extremos
z_scores_m <- scale(nota_m)
extremos_m <- which(abs(z_scores_m)>3)
data_extremos_m <- nota_m[extremos_m]
print(data_extremos_m)
nota_m_sin_extremos <- nota_m[-extremos_m]
shapiro.test(nota_m_sin_extremos)  # cumple normalidad
qqnorm(nota_m_sin_extremos)
qqline(nota_m_sin_extremos, col = "red")
hist(nota_m, main = "Histograma de Nota Matemáticas", xlab = "Puntajes")
data_rural_sin <- data_rural[-extremos_m]
data_rural_sin <- data_rural$M500_EM_2S_2023_MA[-extremos_m]
length(data_rural_sin)
data_rural_sin <- data_rural %>% filter(M500_EM_2S_2023_MA[-extremos_m])
data_rural_sin <- data_rural[-extremos_m, ]
length(data_rural_sin)
View(data_rural_sin)
View(data_rural)
View(data_rural_sin)
shapiro.test(data_rural_sin)
shapiro.test(data_rural_sin$M500_EM_2S_2023_MA)
length(data_rural_sin$M500_EM_2S_2023_MA)
shapiro.test(data_rural_sin$M500_EM_2S_2023_MA)  # cumple normalidad
qqnorm(data_rural_sin$M500_EM_2S_2023_MA)
qqline(data_rural_sin$M500_EM_2S_2023_MA, col = "red")
hist(data_rural_sin$M500_EM_2S_2023_MA, main = "Histograma de Nota Matemáticas", xlab = "Puntajes")
data_hombre <- data_rural_sin %>% filter(sexo == "Hombre")
View(data_hombre)
data_mujer <- data_rural_sin %>% filter(sexo == "Mujer")
shapiro.test(data_hombre$M500_EM_2S_2023_MA)
shapiro.test(data_mujer$M500_EM_2S_2023_MA)
View(data_mujer)
data_hombre <- data_rural_sin %>% filter(sexo == "Hombre") %>% select(2)
shapiro.test(data_hombre$M500_EM_2S_2023_MA)
shapiro.test(data_hombre)
View(data_hombre)
shapiro.test(data_hombre$M500_EM_2S_2023_MA)
data_mujer <- data_rural_sin %>% filter(sexo == "Mujer") %>%  select(2)
shapiro.test(data_mujer$M500_EM_2S_2023_MA)
# Cargar librería
library(TeachingSampling)
# Fijar semilla para reproducibilidad
set.seed(123)
# Definir estratos
estratos <- data_rural_sin$sexo  # Variable que define los estratos (Hombre, Mujer)
# Tamaño de la muestra total (ajústalo según lo que necesites)
n_muestra_total <- 29
# Realizar muestreo estratificado proporcional
indices_estratificados <- S.ST(estratos, n_muestra_total)
# Cargar librería
library(TeachingSampling)
# Fijar semilla para reproducibilidad
set.seed(123)
# Definir estratos
estratos <- data_rural_sin$sexo  # Variable que define los estratos (Hombre, Mujer)
# Tamaño de la muestra total (ajústalo según lo que necesites)
n_muestra_total <- 29
# Realizar muestreo estratificado proporcional
indices_estratificados <- S.ST(estratos, n_muestra_total)
View(data_hombre)
library(TeachingSampling)
N <- nrow(data_rural_sin)
summary(data_rural_sin)
mean(data_rural_sin$M500_EM_2S_2023_MA)
summary(data_rural_sin$M500_EM_2S_2023_MA)
mean(data_rural_sin$M500_EM_2S_2023_MA)
var(data_rural_sin$M500_EM_2S_2023_MA)
sd(data_rural_sin$M500_EM_2S_2023_MA)
# Estimar el tamaño de muestra para una población infinita
S.Size(S = 0.5, E = 0.05, Z = 1.96)
library(TeachingSampling)
qnorm(0.95)
qnorm(0.05)
qnorm(0.95, lower.tail = T)
qnorm(0.95, lower.tail = F)
qnorm(0.95, lower.tail = F)
sqrt(mu)
mu <- var(data_rural_sin$M500_EM_2S_2023_MA)
sqrt(mu)
sd(data_rural_sin$M500_EM_2S_2023_MA)
(N*qnorm(0.95)*mu)/(N*5^2+qnorm(0.95)^2*)sqrt(mu)
(N*qnorm(0.95)*mu)/(N*5^2+qnorm(0.95)^2*)sqrt(mu))
(N*qnorm(0.95)*mu)/(N*5^2+qnorm(0.95)^2*sqrt(mu))
(N*1.96*mu)/(N*5^2+1.96^2*sqrt(mu))
n <- (N*1.96*mu)/(N*5^2+1.96^2*sqrt(mu))
n_h <- nrow(data_hombre)
n_m <- nrow(data_mujer)
N_h <- nrow(data_hombre)
N_m <- nrow(data_mujer)
n_h <- n*N_h/N
n_m <- n*N_m/N
n_h <- n*N_h/N %>% round(1)
n_h <- n*N_h/N %>% round(1)
n*N_h/N %>% round(1)
n*N_h/N %>% round(2)
n*N_h/N %>% round(0)
round(n*N_h/N, 1)
n_h <- n*N_h/N %>% round(,1)
n*N_h/N %>% round(,1)
n_h <- round(n*N_h/N, 1)
n_m <- round(n*N_m/N, 1)
n_m <- round(n*N_m/N, 0)
n_h <- round(n*N_h/N, 0)
sam <- S.STSI(data_rural_sin$sexo, c(N_h, N_m), c(n_h, n_m))
muestra <- data_rural_sin[sam,]
muestra
View(muestra)
n_m+n_h
(N*1.96*mu)/(N*0.05^2+1.96^2*sqrt(mu))
(N*1.96*mu)/(N*5^2+1.96^2*sqrt(mu))
(N*1.96*mu)/(N*10^2+1.96^2*sqrt(mu))
sd(data_rural_sin$M500_EM_2S_2023_MA)
var(data_rural_sin$M500_EM_2S_2023_MA)
sd(data_rural_sin$M500_EM_2S_2023_MA)
sd(data_rural_sin$M500_EM_2S_2023_MA)^2
(N*qnorm(0.95*mu)/(N*5^2+qnorma(0.95^2*sqrt(mu))
(N*qnorm(0.95*mu)/(N*5^2+qnorma(0.95^2*sqrt(mu))
(N*qnorm(0.95*mu)/(N*5^2+qnorma(0.95^2*sqrt(mu)))
(N*qnorm(0.95*mu))/(N*5^2+qnorma(0.95^2*sqrt(mu)))
(N*qnorm(0.95)*mu)/(N*5^2+qnorma(0.95)^2*sqrt(mu))
(N*qnorm(0.95)*mu)/(N*5^2+qnorm(0.95)^2*sqrt(mu))
(N*qnorm(0.95)*mu)/(N*5^2+qnorm(0.95)^2*sqrt(mu))
qnorm(0.95)
(N*qnorm(0.95)*mu)/(N*5^2+qnorm(0.95)^2*sqrt(mu))
round(N*qnorm(0.95)*mu)/(N*5^2+qnorm(0.95)^2*sqrt(mu)),0)
round((N*qnorm(0.95)*mu)/(N*5^2+qnorm(0.95)^2*sqrt(mu)),0)
# Estimar el tamaño de muestra para una población infinita
n <- round((N*qnorm(0.95)*mu)/(N*5^2+qnorm(0.95)^2*sqrt(mu)),0)
n_h <- round(n*N_h/N, 0)
n_m <- round(n*N_m/N, 0)
library(TeachingSampling)
sam <- S.STSI(data_rural_sin$sexo, c(N_h, N_m), c(n_h, n_m))
muestra <- data_rural_sin[sam,]
muestra
View(muestra)
View(muestra)
muestra_hombre <- muestra %>% filter(sexo == "Hombre") %>% select(2)
View(muestra_hombre)
muestra_mujer <- muestra %>% filter(sexo == "Mujer") %>% select(2)
shapiro.test(muestra_hombre)
shapiro.test(muestra_hombre$M500_EM_2S_2023_MA)
shapiro.test(muestra_mujer$M500_EM_2S_2023_MA)
library(TeachingSampling)
set.seed(123)
sam <- S.STSI(data_rural_sin$sexo, c(N_h, N_m), c(n_h, n_m))
muestra <- data_rural_sin[sam,]
View(muestra)
muestra_hombre <- muestra %>% filter(sexo == "Hombre") %>% select(2)
shapiro.test(muestra_hombre$M500_EM_2S_2023_MA)
muestra_mujer <- muestra %>% filter(sexo == "Mujer") %>% select(2)
shapiro.test(muestra_mujer$M500_EM_2S_2023_MA)
qnorm(1 - (1 - 0.95) / 2)
z <- qnorm(1 - (1 - 0.95) / 2)
n <- round((N*z*mu)/(N*5^2+z^2*sqrt(mu)),0)
n_h <- round(n*N_h/N, 0)
n_m <- round(n*N_m/N, 0)
library(TeachingSampling)
set.seed(123)
sam <- S.STSI(data_rural_sin$sexo, c(N_h, N_m), c(n_h, n_m))
muestra <- data_rural_sin[sam,]
View(muestra)
muestra_hombre <- muestra %>% filter(sexo == "Hombre") %>% select(2)
shapiro.test(muestra_hombre$M500_EM_2S_2023_MA)
muestra_mujer <- muestra %>% filter(sexo == "Mujer") %>% select(2)
shapiro.test(muestra_mujer$M500_EM_2S_2023_MA)
n <- round((N*z^2*mu)/(N*5^2+z^2*sqrt(mu)),0)
n_h <- round(n*N_h/N, 0)
n_m <- round(n*N_m/N, 0)
library(TeachingSampling)
n <- round((N*z^2*mu)/(N*0.05^2+z^2*sqrt(mu)),0)
library(readxl)
BD <- read_excel("BD_2S ENLA muestral 2023.xlsx")
library(magrittr)
library(dplyr)
data_ayacucho <- BD %>% filter(departamento == "AYACUCHO") %>% select(c("sexo",
"area",                     # Zona donde viven (rural o urbana)
"M500_EM_2S_2023_MA"))
any(is.na(data_ayacucho))
data_ayacucho_limpio <- na.omit(data_ayacucho)
data_rural <- data_ayacucho_limpio %>% filter(area=="Rural") %>% select(sexo,M500_EM_2S_2023_MA) # se tiene que extraer como vector numerico
shapiro.test(data_rural$M500_EM_2S_2023_MA)
nota_m <- data_rural$M500_EM_2S_2023_MA
shapiro.test(nota_m)
# Q-Q Plot
qqnorm(nota_m)
qqline(nota_m, col = "red")
# Histograma
hist(nota_m, main = "Histograma de Nota Matemáticas", xlab = "Puntajes")
##  quitar valores extremos
z_scores_m <- scale(nota_m)
extremos_m <- which(abs(z_scores_m)>3)
data_extremos_m <- nota_m[extremos_m]
print(data_extremos_m)
data_rural_sin <- data_rural[-extremos_m, ]
shapiro.test(data_rural_sin$M500_EM_2S_2023_MA)  # cumple normalidad
qqnorm(data_rural_sin$M500_EM_2S_2023_MA)
qqline(data_rural_sin$M500_EM_2S_2023_MA, col = "red")
hist(data_rural_sin$M500_EM_2S_2023_MA, main = "Histograma de Nota Matemáticas", xlab = "Puntajes")
data_rural_sin
summary(data_rural_sin$M500_EM_2S_2023_MA)
mean(data_rural_sin$M500_EM_2S_2023_MA)
mu <- var(data_rural_sin$M500_EM_2S_2023_MA)
sd(data_rural_sin$M500_EM_2S_2023_MA)
N <- nrow(data_rural_sin)
data_hombre <- data_rural_sin %>% filter(sexo == "Hombre") %>% select(2)
shapiro.test(data_hombre$M500_EM_2S_2023_MA)   # cumple normalidad
N_h <- nrow(data_hombre)
data_mujer <- data_rural_sin %>% filter(sexo == "Mujer") %>%  select(2)
shapiro.test(data_mujer$M500_EM_2S_2023_MA)    # cumple normalidad
N_m <- nrow(data_mujer)
n <- 160
n_h <- round(n*N_h/N, 0)
n_m <- round(n*N_m/N, 0)
library(TeachingSampling)
set.seed(123)
sam <- S.STSI(data_rural_sin$sexo, c(N_h, N_m), c(n_h, n_m))
muestra <- data_rural_sin[sam,]
View(muestra)
muestra_hombre <- muestra %>% filter(sexo == "Hombre") %>% select(2)
shapiro.test(muestra_hombre$M500_EM_2S_2023_MA)
muestra_mujer <- muestra %>% filter(sexo == "Mujer") %>% select(2)
shapiro.test(muestra_mujer$M500_EM_2S_2023_MA)
sqrt(mu)
data_ayacucho_nuevo <- BD %>% filter(departamento == "AYACUCHO", area == "Rural") %>%
select(c("sexo", "M500_EM_2S_2023_MA")) %>% na.omit()
any(is.na(data_ayacucho_nuevo))
View(data_ayacucho_nuevo)
shapiro.test(data_rural$M500_EM_2S_2023_MA)
shapiro.test(data_ayacucho_nuevo$M500_EM_2S_2023_MA)
shapiro.test(nota_m)
summarise(data_rural_sin$M500_EM_2S_2023_MA)
summarise(data_rural_sin)
summarise(data_rural_sin$M500_EM_2S_2023_MA)
summary(data_rural_sin$M500_EM_2S_2023_MA)
any(is.na(data_ayacucho_nuevo))
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(readxl)
library(magrittr)
library(dplyr)
data_ayacucho_nuevo <- BD %>%
filter(departamento == "AYACUCHO", area == "Rural") %>%
select(c("sexo", "M500_EM_2S_2023_MA")) %>%
na.omit()
shapiro.test(data_ayacucho_nuevo$M500_EM_2S_2023_MA)
qqnorm(nota_m)
qqline(nota_m, col = "red")
print(data_extremos_m)
print(data_extremos_m)
extremos_m
View(data_rural)
View(data_rural_sin)
z_scores_m
z_score_muevo <- scale(data_rural$M500_EM_2S_2023_MA)
z_score_muevo
z_score <- scale(data_rural$M500_EM_2S_2023_MA)
extremos_m <- which(abs(z_scores)>3)
z_score <- scale(data_rural$M500_EM_2S_2023_MA)
extremos_m <- which(abs(z_score)>3)
data_rural_sin <- data_rural[-extremos_m, ]
shapiro.test(data_rural_sin$M500_EM_2S_2023_MA)
#valores al azar de la distribución normal
randNorm <- rnorm(data_rural_sin$M500_EM_2S_2023_MA)
library(ggplot2)
#valores al azar de la distribución normal
randNorm <- rnorm(data_rural_sin$M500_EM_2S_2023_MA)
#calculo de su densidad
randDensity <- dnorm(randNorm)
#gráfica
library(ggplot2)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Random Normal Variable", y = "Densidad")
library(ggplot2)
ggplot(data, aes(x = nota_m)) +
geom_density(fill = "blue", alpha = 0.4) +
labs(title = "Gráfico de Densidad", x = "Nota", y = "Densidad") +
theme_minimal()
ggplot(data_rural_sin, aes(x = data_rural_sin$M500_EM_2S_2023_MA)) +
geom_density(fill = "blue", alpha = 0.4) +
labs(title = "Gráfico de Densidad", x = "Nota", y = "Densidad") +
theme_minimal()
ggplot(data_rural_sin, aes(x = data_rural_sin$M500_EM_2S_2023_MA)) +
geom_density(fill = "blue", alpha = 0.9) +
labs(title = "Gráfico de Densidad", x = "Nota", y = "Densidad") +
theme_minimal()
ggplot(data_rural_sin, aes(x = data_rural_sin$M500_EM_2S_2023_MA)) +
geom_density(fill = "blue", alpha = 0.3) +
labs(title = "Gráfico de Densidad", x = "Nota", y = "Densidad") +
theme_minimal()
BD <- read_excel("BD_2S ENLA muestral 2023.xlsx")
library(readxl)
library(magrittr)
library(dplyr)
BD <- read_excel("BD_2S ENLA muestral 2023.xlsx")
data_rural <- BD %>%
filter(departamento == "AYACUCHO", area == "Rural") %>%
select(c("sexo", "M500_EM_2S_2023_MA")) %>%
na.omit()
shapiro.test(data_rural$M500_EM_2S_2023_MA)
z_score <- scale(data_rural$M500_EM_2S_2023_MA)
extremos_m <- which(abs(z_score)>3)
data_rural_sin <- data_rural[-extremos_m, ]
shapiro.test(data_rural_sin$M500_EM_2S_2023_MA)
library(ggplot2)
ggplot(data_rural_sin, aes(x = data_rural_sin$M500_EM_2S_2023_MA)) +
geom_density(fill = "blue", alpha = 0.3) +
labs(title = "Gráfico de Densidad", x = "Nota", y = "Densidad") +
theme_minimal()
# Calcular el resumen de estadísticas por genero
resumen_nota <- data_rural_sin %>%
group_by(sexo) %>%
summarise(
"Media (\\(\\mu\\))" = mean(M500_EM_2S_2023_MA, na.rm = TRUE),
"Varianza (\\(\\sigma^{2}\\))" = var(M500_EM_2S_2023_MA, na.rm = TRUE),
"Desviación Estándar (\\(\\sigma\\))" = sd(M500_EM_2S_2023_MA, na.rm = TRUE),
"Tamaño de la población (\\(n\\))" = n()
)
# Imprimir el resumen en una tabla usando kable
knitr::kable(resumen_nota, format = "latex", booktabs = TRUE, escape = FALSE,
caption = "Resumen de las notas por género") %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"), full_width = FALSE)
shapiro.test(data_hombre$M500_EM_2S_2023_MA)$p.value
shapiro.test(data_hombre$M500_EM_2S_2023_MA)
View(resumen_nota)
View(data_rural_sin)
bartlett.test(data_rural_sin$M500_EM_2S_2023_MA~data_rural_sin$sexo, data_rural_sin)
bartlett.test(data_rural_sin$M500_EM_2S_2023_MA~data_rural_sin$sexo, data_rural_sin)
bartlett.test(data_rural_sin$M500_EM_2S_2023_MA~data_rural_sin$sexo, data_rural_sin)
library(ggplot2)
# Calcular residuales por grupo
residuales <- lm(M500_EM_2S_2023_MA ~ sexo, data = data_rural_sin)$residuals
data_rural_sin$residuales <- residuales
# Gráfico de residuales
ggplot(data_rural_sin, aes(x = sexo, y = residuales)) +
geom_boxplot(fill = "skyblue", alpha = 0.5) +
labs(title = "Gráfico de Residuales", x = "Género", y = "Residuales") +
theme_minimal()
